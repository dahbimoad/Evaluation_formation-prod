version: '3.8'

services:
  # Kafka setup
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - microservices-network

  # Authentication service
  auth-service:
    build:
      context: ./backend/authentication_system/authentication_system
      dockerfile: Dockerfile
    container_name: authentication-service
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=UserDb
      - DB_USER=postgres
      - DB_PASSWORD=Imad2002
      - JWT_TOKEN=QmFzZTY0IGVuY29kZWQgNjQgYnl0ZSBrZXkgZm9yIEpXVCBIUzUxMiBhbGdvcml0aG0gMTIzNDU2Nzg5MCEjQCQlXiYqKClfKw
      - JWT_ISSUER=auth-service
      - JWT_AUDIENCE=formation-evaluation-app
      - EMAIL_SENDER=imade17ma@gmail.com
      - EMAIL_SENDER_NAME=Imad
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_ENABLE_SSL=true
      - SMTP_USERNAME=imade17ma@gmail.com
      - SMTP_PASSWORD=fsrpmqhytbeoacnc
    depends_on:
      - postgres
    volumes:
      - ./uploads:/app/wwwroot/uploads/profiles
    networks:
      - microservices-network
    restart: unless-stopped

  # PostgreSQL for auth-service
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      - POSTGRES_DB=UserDb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Imad2002
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    restart: unless-stopped

  # Catalog service
  catalog-service:
    build:
      context: ./backend/catalog-service
      dockerfile: Dockerfile
    container_name: catalog-service
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=catalog-postgres;Database=catalog_db;Username=postgres;Password=Imad2002
      - Jwt__Token=QmFzZTY0IGVuY29kZWQgNjQgYnl0ZSBrZXkgZm9yIEpXVCBIUzUxMiBhbGdvcml0aG0gMTIzNDU2Nzg5MCEjQCQlXiYqKClfKw
      - Jwt__Issuer=auth-service
      - Jwt__Audience=formation-evaluation-app
    depends_on:
      - catalog-postgres
      - auth-service
    networks:
      - microservices-network
    restart: unless-stopped

  # PostgreSQL for catalog-service
  catalog-postgres:
    image: postgres:15-alpine
    container_name: catalog-postgres
    environment:
      - POSTGRES_DB=catalog_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Imad2002
    ports:
      - "5433:5432" # Avoid port conflict with auth-service's DB
    volumes:
      - catalog_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped

  # Example: add your questionnaire-service, api-gateway, etc.
  # Make sure to attach them to 'microservices-network'

# Shared Docker network
networks:
  microservices-network:
    driver: bridge
    name: microservices-net

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  catalog_postgres_data:
    driver: local
